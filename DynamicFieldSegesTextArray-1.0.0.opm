<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>DynamicFieldSegesTextArray</Name>
    <Version>1.0.0</Version>
    <Vendor>Seges</Vendor>
    <URL>http://www.camara.leg.br/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <ChangeLog Date="2016-08-22 16:12:00" Version="1.0.0">First version.</ChangeLog>
    <Description Lang="en">DynamicField backend to provide text array for OTRS</Description>
    <Framework>4.0.x</Framework>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">You are about to install DynamicFieldSegesTextArray for OTRS.</IntroInstall>
    <IntroInstall Lang="en" Title="Install Information" Type="post">The package has been installed.</IntroInstall>
    <IntroUninstall Lang="en" Title="Uninstall Information" Type="pre">You are about to UNINSTALL DynamicFieldSegesTextArray for OTRS.</IntroUninstall>
    <IntroUninstall Lang="en" Title="Uninstall Information" Type="post">The package has been uninstalled.</IntroUninstall>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="pre">You are about to upgrade DynamicFieldSegesTextArray for OTRS.</IntroUpgrade>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="post">The package has been upgraded.</IntroUpgrade>
    <CodeInstall Type="post">
    $Kernel::OM-&gt;Get('var::packagesetup::DynamicFieldRemoteDB')-&gt;CodeInstall();
    </CodeInstall>
    <CodeUpgrade Type="post">
    $Kernel::OM-&gt;Get('var::packagesetup::DynamicFieldRemoteDB')-&gt;CodeUpgrade();
    
    </CodeUpgrade>
    <CodeUninstall Type="pre">
    $Kernel::OM-&gt;Get('var::packagesetup::DynamicFieldRemoteDB')-&gt;CodeUninstall();
    
    </CodeUninstall>
    <CodeReinstall Type="post">
    $Kernel::OM-&gt;Get('var::packagesetup::DynamicFieldRemoteDB')-&gt;CodeReinstall();
    
    </CodeReinstall>
    <BuildDate>2016-08-29 16:09:32</BuildDate>
    <BuildHost>yourhost.example.com</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/DynamicFieldSegesTextArray.xml" Permission="664" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPG90cnNfY29uZmlnIHZlcnNpb249IjEuMCIgaW5pdD0iQXBwbGljYXRpb24iPgogICAgPENvbmZpZ0l0ZW0gTmFtZT0iRnJvbnRlbmQ6Ok1vZHVsZSMjI0FkbWluRHluYW1pY0ZpZWxkU2VnZXNUZXh0QXJyYXkiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+RnJvbnRlbmQgbW9kdWxlIHJlZ2lzdHJhdGlvbiBmb3IgdGhlIGFnZW50IGludGVyZmFjZS48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxHcm91cD5EeW5hbWljRmllbGRzPC9Hcm91cD4KICAgICAgICA8U3ViR3JvdXA+RnJvbnRlbmQ6OkFkbWluOjpNb2R1bGVSZWdpc3RyYXRpb248L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8RnJvbnRlbmRNb2R1bGVSZWc+CiAgICAgICAgICAgICAgICA8R3JvdXA+YWRtaW48L0dyb3VwPgogICAgICAgICAgICAgICAgPERlc2NyaXB0aW9uPkFkbWluPC9EZXNjcmlwdGlvbj4KICAgICAgICAgICAgICAgIDxUaXRsZSBUcmFuc2xhdGFibGU9IjEiPkR5bmFtaWMgRmllbGRzIFNlZ2VzVGV4dEFycmF5IEJhY2tlbmQgR1VJPC9UaXRsZT4KICAgICAgICAgICAgICAgIDxMb2FkZXI+CiAgICAgICAgICAgICAgICAgICAgPEphdmFTY3JpcHQ+Q29yZS5BZ2VudC5BZG1pbi5EeW5hbWljRmllbGQuanM8L0phdmFTY3JpcHQ+CiAgICAgICAgICAgICAgICA8L0xvYWRlcj4KICAgICAgICAgICAgPC9Gcm9udGVuZE1vZHVsZVJlZz4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+CgogICAgPENvbmZpZ0l0ZW0gTmFtZT0iRHluYW1pY0ZpZWxkczo6RHJpdmVyIyMjU2VnZXNUZXh0QXJyYXkiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+RHluYW1pY0ZpZWxkIGJhY2tlbmQgcmVnaXN0cmF0aW9uLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPkR5bmFtaWNGaWVsZHM8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5EeW5hbWljRmllbGRzOjpEcml2ZXI6OlJlZ2lzdHJhdGlvbjwvU3ViR3JvdXA+CiAgICAgICAgPFNldHRpbmc+CiAgICAgICAgICAgIDxIYXNoPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJEaXNwbGF5TmFtZSI+U2VnZXNUZXh0QXJyYXk8L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9Ik1vZHVsZSI+S2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZDo6RHJpdmVyOjpTZWdlc1RleHRBcnJheTwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iQ29uZmlnRGlhbG9nIj5BZG1pbkR5bmFtaWNGaWVsZFNlZ2VzVGV4dEFycmF5PC9JdGVtPgogICAgICAgICAgICA8L0hhc2g+CiAgICAgICAgPC9TZXR0aW5nPgogICAgPC9Db25maWdJdGVtPgoKPC9vdHJzX2NvbmZpZz4K</File>
        <File Location="Kernel/Modules/AdminDynamicFieldSegesTextArray.pm" Permission="664" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AdminDynamicFieldSegesTextArray.tt" Permission="664" Encode="Base64"></File>
        <File Location="Kernel/System/DynamicField/Driver/BaseSegesTextArray.pm" Permission="664" Encode="Base64"></File>
        <File Location="Kernel/System/DynamicField/Driver/SegesTextArray.pm" Permission="664" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vRHluYW1pY0ZpZWxkL0RyaXZlci9TZWdlc1RleHRBcnJheS5wbSAtIGJhc2VkIG9uIGV4aXN0aW5nIE9UUlMtQmFja2VuZHMgLSBEZWxlZ2F0ZSBmb3IgRHluYW1pY0ZpZWxkIFNlZ2VzVGV4dEFycmF5IGJhY2tlbmQKIyBDb3B5cmlnaHQgKEMpIDIwMTYgc2FtdWVsZGMsIGh0dHA6Ly93d3cuY2FtYXJhLmxlZy5icg0KIw0KIyB3cml0dGVuL2VkaXRlZCBieToNCiMgKiBuZWRtYWooYXQpeWFob28oZG90KWNvbQ0KIw0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQ0KIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91DQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuDQojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpEeW5hbWljRmllbGQ6OkRyaXZlcjo6U2VnZXNUZXh0QXJyYXk7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OlZhcmlhYmxlQ2hlY2sgcXcoOmFsbCk7DQoNCnVzZSBEYXRhOjpEdW1wZXI7Cgp1c2UgYmFzZSBxdyhLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkOjpEcml2ZXI6OkJhc2VTZWdlc1RleHRBcnJheSk7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkVmFsdWUnLAopOwoKPWhlYWQxIE5BTUUKCktlcm5lbDo6U3lzdGVtOjpEeW5hbWljRmllbGQ6OkRyaXZlcjo6U2VnZXNUZXh0QXJyYXkKCj1oZWFkMSBTWU5PUFNJUwoKRHluYW1pY0ZpZWxkcyBTZWdlc1RleHRBcnJheSBiYWNrZW5kIGRlbGVnYXRlCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKVGhpcyBtb2R1bGUgaW1wbGVtZW50cyB0aGUgcHVibGljIGludGVyZmFjZSBvZiBMPEtlcm5lbDo6U3lzdGVtOjpEeW5hbWljRmllbGQ6OkJhY2tlbmQ+LgpQbGVhc2UgbG9vayB0aGVyZSBmb3IgYSBkZXRhaWxlZCByZWZlcmVuY2Ugb2YgdGhlIGZ1bmN0aW9ucy4KCj1vdmVyIDQKCj1pdGVtIG5ldygpCgp1c3VhbGx5LCB5b3Ugd2FudCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcwpieSB1c2luZyBLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkOjpCYWNrZW5kLT5uZXcoKTsKCj1jdXQKCnN1YiBWYWx1ZUdldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRERlZhbHVlID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZFZhbHVlJyktPlZhbHVlR2V0KAogICAgICAgIEZpZWxkSUQgID0+ICRQYXJhbXtEeW5hbWljRmllbGRDb25maWd9LT57SUR9LAogICAgICAgIE9iamVjdElEID0+ICRQYXJhbXtPYmplY3RJRH0sCiAgICApOwoKICAgIHJldHVybiBpZiAhJERGVmFsdWU7CiAgICByZXR1cm4gaWYgIUlzQXJyYXlSZWZXaXRoRGF0YSgkREZWYWx1ZSk7CiAgICByZXR1cm4gaWYgIUlzSGFzaFJlZldpdGhEYXRhKCAkREZWYWx1ZS0+WzBdICk7CgogICAgIyBleHRyYWN0IHJlYWwgdmFsdWVzCiAgICBteSBAUmV0dXJuRGF0YTsKICAgIGZvciBteSAkSXRlbSAoIEB7JERGVmFsdWV9ICkgewogICAgICAgIHB1c2ggQFJldHVybkRhdGEsICRJdGVtLT57VmFsdWVUZXh0fTsKICAgIH0KCiAgICByZXR1cm4gXEBSZXR1cm5EYXRhOwp9CgpzdWIgVmFsdWVTZXQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIHZhbHVlCiAgICBteSBAVmFsdWVzOwogICAgaWYgKCByZWYgJFBhcmFte1ZhbHVlfSBlcSAnQVJSQVknICkgewogICAgICAgIEBWYWx1ZXMgPSBAeyAkUGFyYW17VmFsdWV9IH07CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBAVmFsdWVzID0gKCAkUGFyYW17VmFsdWV9ICk7CiAgICB9CgoJJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coDQoJICAgIFByaW9yaXR5ID0+ICdlcnJvcicsDQoJICAgIE1lc3NhZ2UgID0+IER1bXBlcihcQFZhbHVlcyksDQoJKTsNCg0KICAgIG15IEBWYWx1ZVRleHQ7CiAgICBpZiAoIElzQXJyYXlSZWZXaXRoRGF0YSggXEBWYWx1ZXMgKSApIHsKICAgICAgICBmb3IgbXkgJEl0ZW0gKEBWYWx1ZXMpIHsKICAgICAgICAgICAgcHVzaCBAVmFsdWVUZXh0LCB7IFZhbHVlVGV4dCA9PiAkSXRlbSB9OwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgIHB1c2ggQFZhbHVlVGV4dCwgeyBWYWx1ZVRleHQgPT4gJycgfTsKICAgIH0KCgkkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygNCgkgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywNCgkgICAgTWVzc2FnZSAgPT4gRHVtcGVyKFxAVmFsdWVUZXh0KSwNCgkpOw0KDQogICAgbXkgJFN1Y2Nlc3MgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkVmFsdWUnKS0+VmFsdWVTZXQoCiAgICAgICAgRmllbGRJRCAgPT4gJFBhcmFte0R5bmFtaWNGaWVsZENvbmZpZ30tPntJRH0sCiAgICAgICAgT2JqZWN0SUQgPT4gJFBhcmFte09iamVjdElEfSwKICAgICAgICBWYWx1ZSAgICA9PiBcQFZhbHVlVGV4dCwKICAgICAgICBVc2VySUQgICA9PiAkUGFyYW17VXNlcklEfSwKICAgICk7CgogICAgcmV0dXJuICRTdWNjZXNzOwp9CgpzdWIgVmFsdWVWYWxpZGF0ZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwogICAgbXkgJFN1Y2Nlc3M7CgogICAgIyBjaGVjayB2YWx1ZQogICAgbXkgQFZhbHVlczsKICAgIGlmICggSXNBcnJheVJlZldpdGhEYXRhKCAkUGFyYW17VmFsdWV9ICkgKSB7CiAgICAgICAgQFZhbHVlcyA9IEB7ICRQYXJhbXtWYWx1ZX0gfTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIEBWYWx1ZXMgPSAoICRQYXJhbXtWYWx1ZX0gKTsKICAgIH0KCiAgICBmb3IgbXkgJEl0ZW0gKEBWYWx1ZXMpIHsKCiAgICAgICAgJFN1Y2Nlc3MgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkVmFsdWUnKS0+VmFsdWVWYWxpZGF0ZSgKICAgICAgICAgICAgVmFsdWUgPT4gewogICAgICAgICAgICAgICAgVmFsdWVUZXh0ID0+ICRJdGVtLAogICAgICAgICAgICB9LAogICAgICAgICAgICBVc2VySUQgPT4gJFBhcmFte1VzZXJJRH0KICAgICAgICApOwogICAgICAgIHJldHVybiBpZiAhJFN1Y2Nlc3MKICAgIH0KICAgIHJldHVybiAkU3VjY2VzczsKfQoKc3ViIEVkaXRGaWVsZFJlbmRlciB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgdGFrZSBjb25maWcgZnJvbSBmaWVsZCBjb25maWcKICAgIG15ICRGaWVsZENvbmZpZyA9ICRQYXJhbXtEeW5hbWljRmllbGRDb25maWd9LT57Q29uZmlnfTsKICAgIG15ICRGaWVsZElEICAgICA9ICRQYXJhbXtEeW5hbWljRmllbGRDb25maWd9LT57SUR9OwogICAgbXkgJEZpZWxkTmFtZSAgID0gJ0R5bmFtaWNGaWVsZF8nIC4gJFBhcmFte0R5bmFtaWNGaWVsZENvbmZpZ30tPntOYW1lfTsKCiAgICBteSAkVmFsdWUgPSBbXTsKCiAgICAkVmFsdWUgPSAkUGFyYW17VmFsdWV9IGlmIGRlZmluZWQgJFBhcmFte1ZhbHVlfTsKCiAgICAjIGV4dHJhY3QgdGhlIGR5bmFtaWMgZmllbGQgdmFsdWUgZm9ybSB0aGUgd2ViIHJlcXVlc3QKICAgIG15ICRGaWVsZFZhbHVlID0gJFNlbGYtPkVkaXRGaWVsZFZhbHVlR2V0KAogICAgICAgICVQYXJhbSwKICAgICk7CgogICAgIyBzZXQgdmFsdWVzIGZyb20gUGFyYW1PYmplY3QgaWYgcHJlc2VudAogICAgaWYgKCBJc0FycmF5UmVmV2l0aERhdGEoJEZpZWxkVmFsdWUpICkgewogICAgICAgICRWYWx1ZSA9ICRGaWVsZFZhbHVlOwogICAgfQoKICAgICMgY2hlY2sgYW5kIHNldCBjbGFzcyBpZiBuZWNlc3NhcnkKICAgIG15ICRGaWVsZENsYXNzID0gJ0R5bmFtaWNGaWVsZFRleHQnOwogICAgaWYgKCBkZWZpbmVkICRQYXJhbXtDbGFzc30gJiYgJFBhcmFte0NsYXNzfSBuZSAnJyApIHsKICAgICAgICAkRmllbGRDbGFzcyAuPSAnICcgLiAkUGFyYW17Q2xhc3N9OwogICAgfQoKICAgICMgc2V0IGZpZWxkIGFzIG1hbmRhdG9yeQogICAgJEZpZWxkQ2xhc3MgLj0gJyBWYWxpZGF0ZV9SZXF1aXJlZCcgaWYgJFBhcmFte01hbmRhdG9yeX07CgogICAgIyBzZXQgZXJyb3IgY3NzIGNsYXNzCiAgICAkRmllbGRDbGFzcyAuPSAnIFNlcnZlckVycm9yJyBpZiAkUGFyYW17U2VydmVyRXJyb3J9OwoKICAgIG15ICRBcnJheUVsZW1lbnRzID0gc2NhbGFyKCBAeyRWYWx1ZX0gKTsKICAgIG15ICRNYXhBcnJheVNpemUgPSAkRmllbGRDb25maWctPntNYXhBcnJheVNpemV9IHx8IDU7CgogICAgIyBzdG9yZSBmaWVsZCBIVE1MCiAgICBteSAkSFRNTFN0cmluZyA9ICcnOwoKICAgIG15ICRTZWxlY3Rpb25EYXRhOwoKICAgIGZvciBteSAkQ291bnQgKCAxIC4uICRBcnJheUVsZW1lbnRzICkgewoKICAgICAgICAkSFRNTFN0cmluZyAuPSA8PCJFT0YiOwo8ZGl2IHN0eWxlPSJtYXJnaW4tYm90dG9tOjJweDsiPgpFT0YKCiAgICAgICAgbXkgJEZpZWxkTmFtZUNvdW50ID0gJEZpZWxkTmFtZSAuICdfJyAuICRDb3VudDsKCgkJbXkgJERpc3BsYXlWYWx1ZSA9ICRTZWxmLT5WYWx1ZUxvb2t1cCggJVBhcmFtLCBLZXkgPT4gJFZhbHVlLT5bICRDb3VudCAtIDEgXSApOwoJCW15ICREaXNwbGF5VGl0bGUgPSAkRGlzcGxheVZhbHVlOwoJCW15ICREaXNwbGF5VmFsdWVIVE1MID0gJFBhcmFte0xheW91dE9iamVjdH0tPkFzY2lpMkh0bWwoCgkJCVRleHQgPT4gJERpc3BsYXlWYWx1ZSwKCQkpOwoJCW15ICREaXNwbGF5VGl0bGVIVE1MID0gJFBhcmFte0xheW91dE9iamVjdH0tPkFzY2lpMkh0bWwoCgkJCVRleHQgPT4gJERpc3BsYXlUaXRsZSwKCQkpOwoJCW15ICREaXNwbGF5RmllbGROYW1lICAgICAgPSAkRmllbGROYW1lIC4gJ0Rpc3BsYXknOwoJCW15ICREaXNwbGF5RmllbGROYW1lQ291bnQgPSAkRGlzcGxheUZpZWxkTmFtZSAuICdfJyAuICRDb3VudDsKCgkJJEhUTUxTdHJpbmcgLj0gPDwiRU9GIjsKPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSIkRmllbGRDbGFzcyIgaWQ9IiREaXNwbGF5RmllbGROYW1lQ291bnQiIG5hbWU9IiREaXNwbGF5RmllbGROYW1lIiB0aXRsZT0iJERpc3BsYXlUaXRsZUhUTUwiIHZhbHVlPSIkRGlzcGxheVZhbHVlSFRNTCIgc3R5bGU9IndpZHRoOiA1MCUiIC8+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSIkRmllbGROYW1lQ291bnQiIG5hbWU9IiRGaWVsZE5hbWUiIHZhbHVlPSIkVmFsdWUtPlskQ291bnQtMV0iIC8+CjxidXR0b24gdHlwZT0iYnV0dG9uIiBpZD0iUmVtb3ZlXyRGaWVsZE5hbWVDb3VudCIgY2xhc3M9IlJlbW92ZSBWYWx1ZVJlbW92ZSIgdmFsdWU9IlJlbW92ZSB2YWx1ZSI+XCRUZXh0eyJSZW1vdmUgdmFsdWUifTwvYnV0dG9uPgo8L2Rpdj4KRU9GCgogICAgICAgICRQYXJhbXtMYXlvdXRPYmplY3R9LT5BZGRKU09uRG9jdW1lbnRDb21wbGV0ZSggQ29kZSA9PiA8PCJFT0YiKTsKLy9iaW5kIGNsaWNrIGZ1bmN0aW9uIHRvIHJlbW92ZSBidXR0b24KXCQoJyNSZW1vdmVfJEZpZWxkTmFtZUNvdW50JykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgXCQoJyMkRGlzcGxheUZpZWxkTmFtZUNvdW50JykudmFsKCcnKTsKICBcJCgnIyREaXNwbGF5RmllbGROYW1lQ291bnQnKS5hdHRyKCJ0aXRsZSIsICcnKTsKICBcJCgnIyRGaWVsZE5hbWVDb3VudCcpLnZhbCgnJyk7CiAgXCQoJyMkRmllbGROYW1lQ291bnQnKS5kYXRhKCdEaXNwbGF5VmFsdWUnLCAnJyk7CiAgXCQoJyMkRmllbGROYW1lQ291bnQnKS5kYXRhKCdEaXNwbGF5VGl0bGUnLCAnJyk7CiAgXCQoJyMkRmllbGROYW1lQ291bnQnKS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpLnBhcmVudCgpLmFkZENsYXNzKCdIaWRkZW4nKS5pbnNlcnRCZWZvcmUoXCQoJyNBZGRfJEZpZWxkTmFtZScpLnBhcmVudCgpKTsKICBpZiAoIFwkKCJbbmFtZT0nJEZpZWxkTmFtZSddOmVuYWJsZWQiKS5sZW5ndGggPCAkTWF4QXJyYXlTaXplICkgewogICAgXCQoJyNBZGRfJEZpZWxkTmFtZScpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdIaWRkZW4nKTsKICB9CiAgXCQoJyMkRmllbGROYW1lQ291bnQnKS50cmlnZ2VyKCdjaGFuZ2UnKTsKICByZXR1cm4gZmFsc2U7Cn0pOwovL2JpbmQgY2hhbmdlIGZ1bmN0aW9uIHRvIGRpc3BsYXkgZmllbGQNClwkKCcjJERpc3BsYXlGaWVsZE5hbWVDb3VudCcpLmJpbmQoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHsNCiAgXCQoJyMkRmllbGROYW1lQ291bnQnKS52YWwoXCQoJyMkRGlzcGxheUZpZWxkTmFtZUNvdW50JykudmFsKCkpOw0KICByZXR1cm4gZmFsc2U7DQp9KTsNCkVPRgoKCiAgICB9CgogICAgZm9yIG15ICRDb3VudCAoICggJEFycmF5RWxlbWVudHMgKyAxICkgLi4gJE1heEFycmF5U2l6ZSApIHsKCiAgICAgICAgJEhUTUxTdHJpbmcgLj0gPDwiRU9GIjsKPGRpdiBzdHlsZT0ibWFyZ2luLWJvdHRvbToycHg7Ij4KRU9GCgogICAgICAgIG15ICRGaWVsZE5hbWVDb3VudCA9ICRGaWVsZE5hbWUgLiAnXycgLiAkQ291bnQ7CgoJCW15ICREaXNwbGF5RmllbGROYW1lICAgICAgPSAkRmllbGROYW1lIC4gJ0Rpc3BsYXknOwoJCW15ICREaXNwbGF5RmllbGROYW1lQ291bnQgPSAkRGlzcGxheUZpZWxkTmFtZSAuICdfJyAuICRDb3VudDsKCgkJJEhUTUxTdHJpbmcgLj0gPDwiRU9GIjsKPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSIkRmllbGRDbGFzcyIgaWQ9IiREaXNwbGF5RmllbGROYW1lQ291bnQiIG5hbWU9IiREaXNwbGF5RmllbGROYW1lIiB0aXRsZT0iIiB2YWx1ZT0iIiBzdHlsZT0id2lkdGg6IDUwJSIgLz4KPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9IiRGaWVsZE5hbWVDb3VudCIgbmFtZT0iJEZpZWxkTmFtZSIgdmFsdWU9IiIgLz4KPGJ1dHRvbiB0eXBlPSJidXR0b24iIGlkPSJSZW1vdmVfJEZpZWxkTmFtZUNvdW50IiBjbGFzcz0iUmVtb3ZlIFZhbHVlUmVtb3ZlIiB2YWx1ZT0iUmVtb3ZlIHZhbHVlIj5cJFRleHR7IlJlbW92ZSB2YWx1ZSJ9PC9idXR0b24+CjwvZGl2PgpFT0YKCgkJICRQYXJhbXtMYXlvdXRPYmplY3R9LT5BZGRKU09uRG9jdW1lbnRDb21wbGV0ZSggQ29kZSA9PiA8PCJFT0YiKTsKLy9iaW5kIGNsaWNrIGZ1bmN0aW9uIHRvIHJlbW92ZSBidXR0b24KXCQoJyNSZW1vdmVfJEZpZWxkTmFtZUNvdW50JykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgXCQoJyMkRGlzcGxheUZpZWxkTmFtZUNvdW50JykudmFsKCcnKTsKICBcJCgnIyREaXNwbGF5RmllbGROYW1lQ291bnQnKS5hdHRyKCJ0aXRsZSIsICcnKTsKICBcJCgnIyRGaWVsZE5hbWVDb3VudCcpLnZhbCgnJyk7CiAgXCQoJyMkRmllbGROYW1lQ291bnQnKS5kYXRhKCdEaXNwbGF5VmFsdWUnLCAnJyk7CiAgXCQoJyMkRmllbGROYW1lQ291bnQnKS5kYXRhKCdEaXNwbGF5VGl0bGUnLCAnJyk7CiAgXCQoJyMkRmllbGROYW1lQ291bnQnKS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpLnBhcmVudCgpLmFkZENsYXNzKCdIaWRkZW4nKS5pbnNlcnRCZWZvcmUoXCQoJyNBZGRfJEZpZWxkTmFtZScpLnBhcmVudCgpKTsKICBpZiAoIFwkKCJbbmFtZT0nJEZpZWxkTmFtZSddOmVuYWJsZWQiKS5sZW5ndGggPCAkTWF4QXJyYXlTaXplICkgewogICAgXCQoJyNBZGRfJEZpZWxkTmFtZScpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdIaWRkZW4nKTsKICB9CiAgXCQoJyMkRmllbGROYW1lQ291bnQnKS50cmlnZ2VyKCdjaGFuZ2UnKTsKICByZXR1cm4gZmFsc2U7Cn0pOwpcJCgnIyRGaWVsZE5hbWVDb3VudCcpLmF0dHIoJ2Rpc2FibGVkJywgdHJ1ZSkucGFyZW50KCkuYWRkQ2xhc3MoJ0hpZGRlbicpOwovL2JpbmQgY2hhbmdlIGZ1bmN0aW9uIHRvIGRpc3BsYXkgZmllbGQNClwkKCcjJERpc3BsYXlGaWVsZE5hbWVDb3VudCcpLmJpbmQoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHsNCiAgXCQoJyMkRmllbGROYW1lQ291bnQnKS52YWwoXCQoJyMkRGlzcGxheUZpZWxkTmFtZUNvdW50JykudmFsKCkpOw0KICByZXR1cm4gZmFsc2U7DQp9KTsNCkVPRgoKICAgIH0KCiAgICBteSAkQ2xhc3NIaWRkZW4gPSAnJzsKICAgIGlmICggJEFycmF5RWxlbWVudHMgPj0gJE1heEFycmF5U2l6ZSApIHsKICAgICAgICAkQ2xhc3NIaWRkZW4gPSAnSGlkZGVuJzsKICAgIH0KICAgICRIVE1MU3RyaW5nIC49IDw8IkVPRiI7CjxkaXYgY2xhc3M9IiRDbGFzc0hpZGRlbiI+CjxidXR0b24gaWQ9IkFkZF8kRmllbGROYW1lIiBjbGFzcz0iQWRkIiB0eXBlPSJidXR0b24iIHZhbHVlPSJBZGQgdmFsdWUiPlwkVGV4dHsiQWRkIHZhbHVlIn08L2J1dHRvbj4KPC9kaXY+CkVPRgoKJFBhcmFte0xheW91dE9iamVjdH0tPkFkZEpTT25Eb2N1bWVudENvbXBsZXRlKCBDb2RlID0+IDw8IkVPRiIpOwovL2JpbmQgY2xpY2sgZnVuY3Rpb24gdG8gYWRkIGJ1dHRvbgpcJCgnI0FkZF8kRmllbGROYW1lJykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgICBcJCgiW25hbWU9JyRGaWVsZE5hbWUnXTpkaXNhYmxlZCIpLmZpcnN0KCkuYXR0cignZGlzYWJsZWQnLCBmYWxzZSkucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ0hpZGRlbicpOwogICAgaWYgKCBcJCgiW25hbWU9JyRGaWVsZE5hbWUnXTplbmFibGVkIikubGVuZ3RoID49ICRNYXhBcnJheVNpemUgKSB7CiAgICAgICAgXCQoJyNBZGRfJEZpZWxkTmFtZScpLnBhcmVudCgpLmFkZENsYXNzKCdIaWRkZW4nKTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKfSk7CkVPRgoKICAgIGlmICggJFBhcmFte01hbmRhdG9yeX0gKSB7CgogICAgICAgICMgZm9yIGNsaWVudCBzaWRlIHZhbGlkYXRpb24KICAgICAgICBteSAkRGl2SUQgPSAkRmllbGROYW1lIC4gJ0Vycm9yJzsKCiAgICAgICAgbXkgJEZpZWxkUmVxdWlyZWRNZXNzYWdlCiAgICAgICAgICAgID0gJFBhcmFte0xheW91dE9iamVjdH0tPntMYW5ndWFnZU9iamVjdH0tPlRyYW5zbGF0ZSgiVGhpcyBmaWVsZCBpcyByZXF1aXJlZC4iKTsKCiAgICAgICAgIyBmb3IgY2xpZW50IHNpZGUgdmFsaWRhdGlvbgogICAgICAgICRIVE1MU3RyaW5nIC49IDw8IkVPRiI7CgogICAgPGRpdiBpZD0iJERpdklEIiBjbGFzcz0iVG9vbHRpcEVycm9yTWVzc2FnZSI+CiAgICAgICAgPHA+CiAgICAgICAgICAgICRGaWVsZFJlcXVpcmVkTWVzc2FnZQogICAgICAgIDwvcD4KICAgIDwvZGl2PgpFT0YKICAgIH0KCiAgICBpZiAoICRQYXJhbXtTZXJ2ZXJFcnJvcn0gKSB7CgogICAgICAgIG15ICRFcnJvck1lc3NhZ2UgPSAkUGFyYW17RXJyb3JNZXNzYWdlfSB8fCAnVGhpcyBmaWVsZCBpcyByZXF1aXJlZC4nOwogICAgICAgICRFcnJvck1lc3NhZ2UgPSAkUGFyYW17TGF5b3V0T2JqZWN0fS0+e0xhbmd1YWdlT2JqZWN0fS0+VHJhbnNsYXRlKCRFcnJvck1lc3NhZ2UpOwoKICAgICAgICBteSAkRGl2SUQgPSAkRmllbGROYW1lIC4gJ1NlcnZlckVycm9yJzsKCiAgICAgICAgIyBmb3Igc2VydmVyIHNpZGUgdmFsaWRhdGlvbgogICAgICAgICRIVE1MU3RyaW5nIC49IDw8IkVPRiI7CiAgICA8ZGl2IGlkPSIkRGl2SUQiIGNsYXNzPSJUb29sdGlwRXJyb3JNZXNzYWdlIj4KICAgICAgICA8cD4KICAgICAgICAgICAgJEVycm9yTWVzc2FnZQogICAgICAgIDwvcD4KICAgIDwvZGl2PgpFT0YKICAgIH0KCiAgICAjIGNhbGwgRWRpdExhYmVsUmVuZGVyIG9uIHRoZSBjb21tb24gYmFja2VuZAogICAgbXkgJExhYmVsU3RyaW5nID0gJFNlbGYtPkVkaXRMYWJlbFJlbmRlcigKICAgICAgICAlUGFyYW0sCiAgICAgICAgTWFuZGF0b3J5ICAgICAgICAgID0+ICRQYXJhbXtNYW5kYXRvcnl9IHx8ICcwJywKICAgICAgICBGaWVsZE5hbWUgICAgICAgICAgPT4gJEZpZWxkTmFtZSwKICAgICk7CgogICAgbXkgJERhdGEgPSB7CiAgICAgICAgRmllbGQgPT4gJEhUTUxTdHJpbmcsCiAgICAgICAgTGFiZWwgPT4gJExhYmVsU3RyaW5nLAogICAgfTsKCiAgICByZXR1cm4gJERhdGE7Cn0KCnN1YiBFZGl0RmllbGRWYWx1ZUdldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRGaWVsZE5hbWUgPSAnRHluYW1pY0ZpZWxkXycgLiAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfS0+e05hbWV9OwoKICAgIG15ICRWYWx1ZTsKCiAgICAjIGNoZWNrIGlmIHRoZXJlIGlzIGEgVGVtcGxhdGUgYW5kIHJldHJlaXZlIHRoZSBkeW5hbWljIGZpZWxkIHZhbHVlIGZyb20gdGhlcmUKICAgIGlmICggSXNIYXNoUmVmV2l0aERhdGEoICRQYXJhbXtUZW1wbGF0ZX0gKSApIHsKICAgICAgICAkVmFsdWUgPSAkUGFyYW17VGVtcGxhdGV9LT57JEZpZWxkTmFtZX07CiAgICB9CgogICAgIyBvdGhlcndpc2UgZ2V0IGR5bmFtaWMgZmllbGQgdmFsdWUgZm9ybSBwYXJhbQogICAgZWxzZSB7CiAgICAgICAgbXkgQERhdGEgPSAkUGFyYW17UGFyYW1PYmplY3R9LT5HZXRBcnJheSggUGFyYW0gPT4gJEZpZWxkTmFtZSApOwogICAgICAgICRWYWx1ZSA9IFxARGF0YTsKICAgIH0KCiAgICBpZiAoIGRlZmluZWQgJFBhcmFte1JldHVyblRlbXBsYXRlU3RydWN0dXJlfSAmJiAkUGFyYW17UmV0dXJuVGVtcGxhdGVTdHJ1Y3R1cmV9IGVxICcxJyApIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAkRmllbGROYW1lID0+ICRWYWx1ZSwKICAgICAgICB9OwogICAgfQoKICAgICMgZm9yIHRoaXMgZmllbGQgdGhlIG5vcm1hbCByZXR1cm4gYW4gdGhlIFJldHVyblZhbHVlU3RydWN0dXJlIGFyZSB0aGUgc2FtZQogICAgcmV0dXJuICRWYWx1ZTsKfQoKc3ViIEVkaXRGaWVsZFZhbHVlVmFsaWRhdGUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGdldCB0aGUgZmllbGQgdmFsdWUgZnJvbSB0aGUgaHR0cCByZXF1ZXN0CiAgICBteSAkVmFsdWUgPSAkU2VsZi0+RWRpdEZpZWxkVmFsdWVHZXQoCiAgICAgICAgRHluYW1pY0ZpZWxkQ29uZmlnID0+ICRQYXJhbXtEeW5hbWljRmllbGRDb25maWd9LAogICAgICAgIFBhcmFtT2JqZWN0ICAgICAgICA9PiAkUGFyYW17UGFyYW1PYmplY3R9LAoKICAgICAgICAjIG5vdCBuZWNlc3NhcnkgZm9yIHRoaXMgYmFja2VuZCBidXQgcGxhY2UgaXQgZm9yIGNvbnNpc3RlbmN5IHJlYXNvbnMKICAgICAgICBSZXR1cm5WYWx1ZVN0cnVjdHVyZSA9PiAxLAogICAgKTsKCiAgICBteSAkU2VydmVyRXJyb3I7CiAgICBteSAkRXJyb3JNZXNzYWdlOwoKICAgICMgcGVyZm9ybSBuZWNlc3NhcnkgdmFsaWRhdGlvbnMKICAgIGlmICggJFBhcmFte01hbmRhdG9yeX0gJiYgIUlzQXJyYXlSZWZXaXRoRGF0YSgkVmFsdWUpICkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIFNlcnZlckVycm9yID0+IDEsCiAgICAgICAgfTsKICAgIH0KCiAgICAjIGNyZWF0ZSByZXN1bHRpbmcgc3RydWN0dXJlCiAgICBteSAkUmVzdWx0ID0gewogICAgICAgIFNlcnZlckVycm9yICA9PiAkU2VydmVyRXJyb3IsCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRFcnJvck1lc3NhZ2UsCiAgICB9OwoKICAgIHJldHVybiAkUmVzdWx0Owp9CgpzdWIgRGlzcGxheVZhbHVlUmVuZGVyIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBzZXQgSFRNTE91cHV0IGFzIGRlZmF1bHQgaWYgbm90IHNwZWNpZmllZAogICAgaWYgKCAhZGVmaW5lZCAkUGFyYW17SFRNTE91dHB1dH0gKSB7CiAgICAgICAgJFBhcmFte0hUTUxPdXRwdXR9ID0gMTsKICAgIH0KCiAgICAjIGdldCByYXcgVmFsdWUgc3RyaW5ncyBmcm9tIGZpZWxkIHZhbHVlCiAgICBteSBAS2V5czsKICAgIGlmICggcmVmICRQYXJhbXtWYWx1ZX0gZXEgJ0FSUkFZJyApIHsKICAgICAgICBAS2V5cyA9IEB7ICRQYXJhbXtWYWx1ZX0gfTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIEBLZXlzID0gKCAkUGFyYW17VmFsdWVzfSApOwogICAgfQoKICAgIG15IEBWYWx1ZXM7CgogICAgZm9yIG15ICRLZXkgKEBLZXlzKSB7CgogICAgICAgICRLZXkgfHw9ICcnOwoKICAgICAgICBteSAkVmFsdWUgPSAkU2VsZi0+VmFsdWVMb29rdXAoICVQYXJhbSwgS2V5ID0+ICRLZXksICk7CgogICAgICAgICMgc2V0IHRpdGxlIGFzIHZhbHVlIGFmdGVyIHVwZGF0ZSBhbmQgYmVmb3JlIGxpbWl0CiAgICAgICAgbXkgJFRpdGxlID0gJFZhbHVlOwoKICAgICAgICAjIEhUTUxPdXB1dCB0cmFuc2Zvcm1hdGlvbnMKICAgICAgICBpZiAoICRQYXJhbXtIVE1MT3V0cHV0fSApIHsKICAgICAgICAgICAgJFZhbHVlID0gJFBhcmFte0xheW91dE9iamVjdH0tPkFzY2lpMkh0bWwoCiAgICAgICAgICAgICAgICBUZXh0ID0+ICRWYWx1ZSwKICAgICAgICAgICAgICAgIE1heCA9PiAkUGFyYW17VmFsdWVNYXhDaGFyc30gfHwgJycsCiAgICAgICAgICAgICk7CgogICAgICAgICAgICAkVGl0bGUgPSAkUGFyYW17TGF5b3V0T2JqZWN0fS0+QXNjaWkySHRtbCgKICAgICAgICAgICAgICAgIFRleHQgPT4gJFRpdGxlLAogICAgICAgICAgICAgICAgTWF4ID0+ICRQYXJhbXtUaXRsZU1heENoYXJzfSB8fCAnJywKICAgICAgICAgICAgKTsKICAgICAgICAgICAgIyBzZXQgZmllbGQgbGluayBmb3JtIGNvbmZpZwogICAgICAgICAgICBteSAkSGFzTGluayA9IDA7CiAgICAgICAgICAgIG15ICRPbGRWYWx1ZTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGlmICggJFBhcmFte1ZhbHVlTWF4Q2hhcnN9ICYmIGxlbmd0aCgkVmFsdWUpID4gJFBhcmFte1ZhbHVlTWF4Q2hhcnN9ICkgewogICAgICAgICAgICAgICAgJFZhbHVlID0gc3Vic3RyKCAkVmFsdWUsIDAsICRQYXJhbXtWYWx1ZU1heENoYXJzfSApIC4gJy4uLic7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCAkUGFyYW17VGl0bGVNYXhDaGFyc30gJiYgbGVuZ3RoKCRUaXRsZSkgPiAkUGFyYW17VGl0bGVNYXhDaGFyc30gKSB7CiAgICAgICAgICAgICAgICAkVGl0bGUgPSBzdWJzdHIoICRUaXRsZSwgMCwgJFBhcmFte1RpdGxlTWF4Q2hhcnN9ICkgLiAnLi4uJzsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBwdXNoIEBWYWx1ZXMsICRWYWx1ZTsKICAgIH0KCiAgICAjIHNldCBpdGVtIHNlcGFyYXRvcgogICAgbXkgJEl0ZW1TZXBhcmF0b3IgPSAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfS0+e0NvbmZpZ30tPntJdGVtU2VwYXJhdG9yfSB8fCAnLCAnOwoKICAgIG15ICRWYWx1ZSA9IGpvaW4oICRJdGVtU2VwYXJhdG9yLCBAVmFsdWVzICk7CgogICAgbXkgJERhdGEgPSB7CiAgICAgICAgVmFsdWUgPT4gJFZhbHVlLAogICAgICAgIFRpdGxlID0+ICcnLAogICAgICAgIExpbmsgID0+ICcnLAogICAgfTsKCiAgICByZXR1cm4gJERhdGE7Cn0KCnN1YiBSZWFkYWJsZVZhbHVlUmVuZGVyIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBzZXQgVmFsdWUgYW5kIFRpdGxlIHZhcmlhYmxlcwogICAgbXkgJFZhbHVlID0gJyc7CiAgICBteSAkVGl0bGUgPSAnJzsKCiAgICAjIGNoZWNrIHZhbHVlCiAgICBteSBAVmFsdWVzOwogICAgaWYgKCByZWYgJFBhcmFte1ZhbHVlfSBlcSAnQVJSQVknICkgewogICAgICAgIEBWYWx1ZXMgPSBAeyAkUGFyYW17VmFsdWV9IH07CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBAVmFsdWVzID0gKCAkUGFyYW17VmFsdWV9ICk7CiAgICB9CgogICAgbXkgQFJlYWRhYmxlVmFsdWVzOwoKICAgIFZBTFVFSVRFTToKICAgIGZvciBteSAkSXRlbSAoQFZhbHVlcykgewogICAgICAgIG5leHQgVkFMVUVJVEVNIGlmICEkSXRlbTsKCiAgICAgICAgcHVzaCBAUmVhZGFibGVWYWx1ZXMsICRJdGVtOwogICAgfQoKICAgICMgc2V0IGl0ZW0gc2VwYXJhdG9yCiAgICBteSAkSXRlbVNlcGFyYXRvciA9ICRQYXJhbXtEeW5hbWljRmllbGRDb25maWd9LT57Q29uZmlnfS0+e0l0ZW1TZXBhcmF0b3J9IHx8ICcsICc7CgogICAgIyBPdXB1dCB0cmFuc2Zvcm1hdGlvbnMKICAgICRWYWx1ZSA9IGpvaW4oICRJdGVtU2VwYXJhdG9yLCBAUmVhZGFibGVWYWx1ZXMgKTsKICAgICRUaXRsZSA9ICRWYWx1ZTsKCiAgICAjIGN1dCBzdHJpbmdzIGlmIG5lZWRlZAogICAgaWYgKCAkUGFyYW17VmFsdWVNYXhDaGFyc30gJiYgbGVuZ3RoKCRWYWx1ZSkgPiAkUGFyYW17VmFsdWVNYXhDaGFyc30gKSB7CiAgICAgICAgJFZhbHVlID0gc3Vic3RyKCAkVmFsdWUsIDAsICRQYXJhbXtWYWx1ZU1heENoYXJzfSApIC4gJy4uLic7CiAgICB9CiAgICBpZiAoICRQYXJhbXtUaXRsZU1heENoYXJzfSAmJiBsZW5ndGgoJFRpdGxlKSA+ICRQYXJhbXtUaXRsZU1heENoYXJzfSApIHsKICAgICAgICAkVGl0bGUgPSBzdWJzdHIoICRUaXRsZSwgMCwgJFBhcmFte1RpdGxlTWF4Q2hhcnN9ICkgLiAnLi4uJzsKICAgIH0KCiAgICAjIGNyZWF0ZSByZXR1cm4gc3RydWN0dXJlCiAgICBteSAkRGF0YSA9IHsKICAgICAgICBWYWx1ZSA9PiAkVmFsdWUsCiAgICAgICAgVGl0bGUgPT4gJFRpdGxlLAogICAgfTsKCiAgICByZXR1cm4gJERhdGE7Cn0KCnN1YiBUZW1wbGF0ZVZhbHVlVHlwZUdldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRGaWVsZE5hbWUgPSAnRHluYW1pY0ZpZWxkXycgLiAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfS0+e05hbWV9OwoKICAgICMgc2V0IHRoZSBmaWVsZCB0eXBlcwogICAgbXkgJEVkaXRWYWx1ZVR5cGUgICA9ICdBUlJBWSc7CiAgICBteSAkU2VhcmNoVmFsdWVUeXBlID0gJ0FSUkFZJzsKCiAgICAjIHJldHVybiB0aGUgY29ycmVjdCBzdHJ1Y3R1cmUKICAgIGlmICggJFBhcmFte0ZpZWxkVHlwZX0gZXEgJ0VkaXQnICkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICRGaWVsZE5hbWUgPT4gJEVkaXRWYWx1ZVR5cGUsCiAgICAgICAgICAgIH0KICAgIH0KICAgIGVsc2lmICggJFBhcmFte0ZpZWxkVHlwZX0gZXEgJ1NlYXJjaCcgKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgJ1NlYXJjaF8nIC4gJEZpZWxkTmFtZSA9PiAkU2VhcmNoVmFsdWVUeXBlLAogICAgICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAkRmllbGROYW1lICAgICAgICAgICAgID0+ICRFZGl0VmFsdWVUeXBlLAogICAgICAgICAgICAnU2VhcmNoXycgLiAkRmllbGROYW1lID0+ICRTZWFyY2hWYWx1ZVR5cGUsCiAgICAgICAgICAgIH0KICAgIH0KfQoKc3ViIE9iamVjdE1hdGNoIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJEZpZWxkTmFtZSA9ICdEeW5hbWljRmllbGRfJyAuICRQYXJhbXtEeW5hbWljRmllbGRDb25maWd9LT57TmFtZX07CgogICAgIyByZXR1cm4gZmFsc2UgaWYgZmllbGQgaXMgbm90IGRlZmluZWQKICAgIHJldHVybiAwIGlmICggIWRlZmluZWQgJFBhcmFte09iamVjdEF0dHJpYnV0ZXN9LT57JEZpZWxkTmFtZX0gKTsKCiAgICAjIHRoZSBhdHRyaWJ1dGUgbXVzdCBiZSBhbiBhcnJheQogICAgcmV0dXJuIDAgaWYgIUlzQXJyYXlSZWZXaXRoRGF0YSggJFBhcmFte09iamVjdEF0dHJpYnV0ZXN9LT57JEZpZWxkTmFtZX0gKTsKCiAgICBteSAkTWF0Y2g7CgogICAgIyBzZWFyY2ggaW4gYWxsIHZhbHVlcyBmb3IgdGhpcyBhdHRyaWJ1dGUKICAgIFZBTFVFOgogICAgZm9yIG15ICRBdHRyaWJ1dGVWYWx1ZSAoIEB7ICRQYXJhbXtPYmplY3RBdHRyaWJ1dGVzfS0+eyRGaWVsZE5hbWV9IH0gKSB7CgogICAgICAgIG5leHQgVkFMVUUgaWYgIWRlZmluZWQgJEF0dHJpYnV0ZVZhbHVlOwoKICAgICAgICAjIG9ubHkgbmVlZCB0byBtYXRjaCBvbmUKICAgICAgICBpZiAoICRQYXJhbXtWYWx1ZX0gZXEgJEF0dHJpYnV0ZVZhbHVlICkgewogICAgICAgICAgICAkTWF0Y2ggPSAxOwogICAgICAgICAgICBsYXN0IFZBTFVFOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiAkTWF0Y2g7Cn0KCnN1YiBQb3NzaWJsZVZhbHVlc0dldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybjsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChMPGh0dHA6Ly9vdHJzLm9yZy8+KS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="var/packagesetup/DynamicFieldSegesTextArray.pm" Permission="664" Encode="Base64"></File>
    </Filelist>
    <DatabaseInstall>
    </DatabaseInstall>
    <DatabaseUpgrade>
    </DatabaseUpgrade>
    <DatabaseReinstall>
    </DatabaseReinstall>
    <DatabaseUninstall>
    </DatabaseUninstall>
</otrs_package>